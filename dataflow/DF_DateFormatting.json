{
	"name": "DF_DateFormatting",
	"properties": {
		"folder": {
			"name": "1"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DB_Transactions",
						"type": "DatasetReference"
					},
					"name": "DBTransactions"
				},
				{
					"dataset": {
						"referenceName": "DB_Items",
						"type": "DatasetReference"
					},
					"name": "DBItems"
				},
				{
					"dataset": {
						"referenceName": "DB_Customer",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DB_Transactions",
						"type": "DatasetReference"
					},
					"name": "SinkTransactions"
				},
				{
					"dataset": {
						"referenceName": "DB_Items",
						"type": "DatasetReference"
					},
					"name": "SinkItems"
				},
				{
					"dataset": {
						"referenceName": "DB_Customer",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "DateFormatInDDMMYYYY"
				},
				{
					"name": "DateFormatingDDMMYYYY"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          TransactionID as string,",
				"          CustomerID as string,",
				"          ProductID as string,",
				"          Quantity as string,",
				"          totalAmount as string,",
				"          date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DBTransactions",
				"source(output(",
				"          Id as string,",
				"          ItemId as string,",
				"          ItemName as string,",
				"          Category as string,",
				"          Quantity as string,",
				"          {Price (Per Unit)} as double,",
				"          Supplier as string,",
				"          Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DBItems",
				"source(output(",
				"          Id as string,",
				"          CustomerName as string,",
				"          Email as string,",
				"          Phone as string,",
				"          Address as string,",
				"          {Joining Date} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"DBTransactions derive(date = toDate(toTimestamp(toInteger(toLong(date) / toLong(1000))*1000l))) ~> DateFormatInDDMMYYYY",
				"DBItems derive(Date = toDate(toTimestamp(toInteger(toLong(Date) / toLong(1000))*1000l))) ~> DateFormatingDDMMYYYY",
				"source1 derive({Joining Date} = toDate(toTimestamp(toInteger(toLong({Joining Date}) / toLong(1000))*1000l))) ~> derivedColumn1",
				"DateFormatInDDMMYYYY sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SinkTransactions",
				"DateFormatingDDMMYYYY sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SinkItems",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}